// This file was generated by modules-webmake (modules for web) project.
// See: https://github.com/medikoo/modules-webmake

(function (modules) {
	'use strict';

	var resolve, getRequire, wmRequire, notFoundError, findFile
	  , extensions = {".js":[],".json":[],".css":[],".html":[]}
	  , envRequire = typeof require === 'function' ? require : null;

	notFoundError = function (path) {
		var error = new Error("Could not find module '" + path + "'");
		error.code = 'MODULE_NOT_FOUND';
		return error;
	};
	findFile = function (scope, name, extName) {
		var i, ext;
		if (typeof scope[name + extName] === 'function') return name + extName;
		for (i = 0; (ext = extensions[extName][i]); ++i) {
			if (typeof scope[name + ext] === 'function') return name + ext;
		}
		return null;
	};
	resolve = function (scope, tree, path, fullPath, state, id) {
		var name, dir, exports, module, fn, found, ext;
		path = path.split(/[\\/]/);
		name = path.pop();
		if ((name === '.') || (name === '..')) {
			path.push(name);
			name = '';
		}
		while ((dir = path.shift()) != null) {
			if (!dir || (dir === '.')) continue;
			if (dir === '..') {
				scope = tree.pop();
				id = id.slice(0, id.lastIndexOf('/'));
			} else {
				tree.push(scope);
				scope = scope[dir];
				id += '/' + dir;
			}
			if (!scope) throw notFoundError(fullPath);
		}
		if (name && (typeof scope[name] !== 'function')) {
			found = findFile(scope, name, '.js');
			if (!found) found = findFile(scope, name, '.json');
			if (!found) found = findFile(scope, name, '.css');
			if (!found) found = findFile(scope, name, '.html');
			if (found) {
				name = found;
			} else if ((state !== 2) && (typeof scope[name] === 'object')) {
				tree.push(scope);
				scope = scope[name];
				id += '/' + name;
				name = '';
			}
		}
		if (!name) {
			if ((state !== 1) && scope[':mainpath:']) {
				return resolve(scope, tree, scope[':mainpath:'], fullPath, 1, id);
			}
			return resolve(scope, tree, 'index', fullPath, 2, id);
		}
		fn = scope[name];
		if (!fn) throw notFoundError(fullPath);
		if (fn.hasOwnProperty('module')) return fn.module.exports;
		exports = {};
		fn.module = module = { exports: exports, id: id + '/' + name };
		fn.call(exports, exports, module, getRequire(scope, tree, id));
		return module.exports;
	};
	wmRequire = function (scope, tree, fullPath, id) {
		var name, path = fullPath, t = fullPath.charAt(0), state = 0;
		if (t === '/') {
			path = path.slice(1);
			scope = modules['/'];
			if (!scope) {
				if (envRequire) return envRequire(fullPath);
				throw notFoundError(fullPath);
			}
			id = '/';
			tree = [];
		} else if (t !== '.') {
			name = path.split('/', 1)[0];
			scope = modules[name];
			if (!scope) {
				if (envRequire) return envRequire(fullPath);
				throw notFoundError(fullPath);
			}
			id = name;
			tree = [];
			path = path.slice(name.length + 1);
			if (!path) {
				path = scope[':mainpath:'];
				if (path) {
					state = 1;
				} else {
					path = 'index';
					state = 2;
				}
			}
		}
		return resolve(scope, tree, path, fullPath, state, id);
	};
	getRequire = function (scope, tree, id) {
		return function (path) {
			return wmRequire(scope, [].concat(tree), path, id);
		};
	};
	return getRequire(modules, [], '');
})({
	"consistency": {
		"www-dev": {
			"js": {
				"app.dev.js": function (exports, module, require) {
					/* App */
					require("./zebra.js");

					/* Constants */
					require("./config.js");

					/* Controllers */
					require("./controllers/main.js");
					require("./controllers/packs.js");
					require("./controllers/pack.js");
					require("./controllers/puzzles.js");
					require("./controllers/intro.js");
					require("./controllers/puzzle.js");
					require("./controllers/tutorial.js");

					/* Services */
					require("./services/packs.js");
					require("./services/audio.js");
					require("./services/ads.js");

					require("./services/db.js");
				},
				"config.js": function (exports, module, require) {
					var zebra = require("./zebra.js");

					zebra.constant("config", {
						appnext: {
							id: "d5a4bc74-879a-4fd3-b9d2-b949de3c23c4"
						}
					});
				},
				"controllers": {
					"intro.js": function (exports, module, require) {
						var zebra = require("../zebra.js");

						zebra.controller("IntroCtrl", [
							"$scope",
							"$stateParams",
							"$ionicTabsDelegate",
							"$timeout",
						function (
							$scope,
							$stateParams,
							$ionicTabsDelegate,
							$timeout
						) {
							"use strict";

							if (
								$stateParams.gridIndex === "-1" &&
								$stateParams.packIndex === ""
							) {
								$scope.showClue = +$stateParams.puzzleIndex;
							}

							$timeout(function () {
								$ionicTabsDelegate.select(0);
							}, 400);
						}]);
					},
					"main.js": function (exports, module, require) {
						var zebra = require("../zebra.js");

						zebra.controller("MainCtrl", [
							"$scope", "$ionicModal", "audio",
							"$ionicLoading", "$ionicPopup", "$window", "$ionicPlatform",
						function (
							$scope,
							$ionicModal,
							audio,
							$ionicLoading,
							$ionicPopup,
							$window,
							$ionicPlatform
						) {
							"use strict";

							if (window.cordova) {
								$scope.showRateIt = true;
							}

							$scope.getColor = function (perc) {
								var r = 52 - 51;
								var g = 135 - 51;
								var b = 129 - 51;
								r = Math.ceil(51 + r*perc);
								g = Math.ceil(51 + g*perc);
								b = Math.ceil(51 + b*perc);

								return "rgb("+r+","+g+","+b+")";
							};

							$scope.getColor2 = function (perc) {
								var r = 127;
								var d = Math.PI*2*perc;
								var x = Math.floor(128 + Math.cos(d)*r);
								var y = Math.floor(128 + Math.sin(d)*r);
								var z = Math.floor(perc*255);

								return "rgb("+x+","+y+","+z+")";
							};

							$scope.getWindowSize = function () {
								return {
									"h": $window.innerHeight,
									"w": $window.innerWidth
								};
							};

							angular.element($window).on("resize", function () {
								$scope.$apply();
							});

							$scope.rateIt = function () {
								cordova.plugins.market.open("com.fsvieira.consistency");
							};

							$scope.showVideoError = function (/* err */) {
								$ionicPopup.alert({
									title: "Video Error",
									template:
									"There was an unexpected error, " +
									"please check your connection and try again."
								}).then(function () {});
							};

							$scope.loadingStart = function () {
								$ionicLoading.show({
									templateUrl: "templates/loading.html"
								});
							};

							$scope.loadingEnd = function () {
								$ionicLoading.hide();
							};

							if (!localStorage.getItem("settings")) {
								localStorage.setItem(
									"settings",
									JSON.stringify({
										music: true,
										sounds: true,
										badchoice: true
									})
								);
							}

							var settings = JSON.parse(localStorage.getItem("settings"));

							$scope.settings = settings;

							// Settings stuff,
							$ionicModal.fromTemplateUrl("templates/settings.html", {
								scope: $scope,
								animation: "slide-in-up"
							}).then(function (modal) {
								$scope.settingsModal = modal;
							});

							$scope.openSettings = function () {
								$scope.settingsModal.show();
							};

							$scope.closeSettings = function () {
								$scope.settingsModal.hide();
							};

							$scope.saveSettings = function () {
								localStorage.setItem("settings", JSON.stringify(settings));
							};

							$scope.updateMusic = function () {
								if (settings.music) {
									audio.open("music/song18_0.mp3").then(function (sound) {
										sound.loop(true);
										sound.play();
									});
								}
								else {
									audio.open("music/song18_0.mp3").then(function (sound) {
										sound.pause();
									});
								}

								$scope.saveSettings();
							};

							document.addEventListener("pause", function () {
								if (settings.music) {
									audio.open("music/song18_0.mp3").then(function (sound) {
										sound.pause();
									});
								}
							}, false);

							document.addEventListener("resume", function () {
								if (settings.music) {
									audio.open("music/song18_0.mp3").then(function (sound) {
										sound.loop(true);
										sound.play();
									});
								}
							}, false);

							$ionicPlatform.ready(function () {
								$scope.updateMusic();
							});
						}]);
					},
					"pack.js": function (exports, module, require) {
						var zebra = require("../zebra.js");

						zebra.controller("PackCtrl", [
							"$scope", "packs", "$stateParams", function (
							$scope,
							packs,
							$stateParams
						) {
							"use strict";

							$scope.loadingStart();
							packs.getPack($stateParams.packIndex).then(
								function (pack) {
									$scope.pack = pack;
									$scope.loadingEnd();
								}
							);
						}]);
					},
					"packs.js": function (exports, module, require) {
						var zebra = require("../zebra.js");

						zebra.controller("PacksCtrl", [
							"$scope", "packs", function (
							$scope,
							packs
						) {
							"use strict";
							$scope.loadingStart();
							$scope.pages = [];

							$scope.page = function (p) {
								if ($scope.currentPage !== p) {
									$scope.currentPage = p;
									$scope.loadingStart();
									packs.getPacks(p*10, p*10+10).then(
										function (packs) {
											$scope.packs = packs;
											$scope.loadingEnd();
										},
										function (err) {
											console.log(err);
										}
									);
								}
							};

							$scope.$watch(function () {
								return packs.data.total;
							}, function (total) {
								if (total >= 1) {
									if ($scope.currentPage===undefined) {
										$scope.page(0);
									}

									var pages = Math.floor(total / 10) + 1;

									for (var i=$scope.pages.length; i<pages; i++) {
										$scope.pages[i] = i+1;
									}
								}
							});
						}]);
					},
					"puzzle.js": function (exports, module, require) {
						var zebra = require("../zebra.js");

						zebra.controller("PuzzleCtrl", [
							"$scope", "packs", "$state", "$stateParams", "$window",
							"$ionicModal", "$ionicPopup", "audio",
							"$ionicHistory", "$location", "$timeout", "ads",
						function (
							$scope,
							packs,
							$state,
							$stateParams,
							$window,
							$ionicModal,
							$ionicPopup,
							audio,
							$ionicHistory,
							$location,
							$timeout,
							ads
						) {
							"use strict";

							$scope.showAds = {};

							function updateAds () {
								ads.getAd().then(function (ad) {
									$scope.showAds.winAd = ad.winAd;
									$scope.showAds.restartAd = ad.restartAd;
									$scope.showAds.badchoiceAd = ad.badchoiceAd;

									// keep ads upated,
									setTimeout(updateAds, 1000*60);
								}, function (err) {
									console.log(err);
								});
							}

							updateAds();

							var trigger = function () {};
							$scope.setTrigger = function (t) {
								trigger = t;
							};

							$scope.getID = function (clue) {
								return clue.type.replace(/ /g, "_") +
									"-" + clue.a.v + (clue.b?"-" + clue.b.v:"");
							};

							audio.load("click", "sounds/click.mp3");
							audio.load("alert", "sounds/alert.mp3");
							audio.load("remove", "sounds/remove.mp3");
							audio.load("add", "sounds/add.mp3");
							audio.load("flip", "sounds/flip.mp3");
							audio.load("win", "sounds/win.mp3");

							$ionicModal.fromTemplateUrl("templates/startpack/intro.html", {
								scope: $scope,
								animation: "slide-in-up"
							}).then(function (modal) {
								$scope.tutorialIntro = modal;
								// modal.show();
							});

							$scope.openTutorialIntro = function () {
								$scope.tutorialIntro.show();
							};

							$scope.closeTutorialIntro = function () {
								$scope.tutorialIntro.hide();
							};

							$scope.openHandbook = function () {
								// $scope.handbook.show();
								$scope.tutorialIntro.show();
							};

							// Cleanup the modal when we're done with it!
							$scope.$on("$destroy", function () {
								// $scope.handbook.remove();
								$scope.tutorialIntro.remove();
							});

							function play (name) {
								if ($scope.settings.sounds) {
									audio.play(name);
								}
							}

							$scope.loadingStart();

							$scope.imageSet = "set_0";

							$scope.trymode = {};

							$scope.toggleTryMode = function () {
								$scope.trymode.on = !$scope.trymode.on;
								if ($scope.trymode.on) {
									$scope.board.board.forEach(function (row) {
										row.forEach(function (cell) {
											cell.forEach(function (item) {
												item.tryHigthligth = false;
											});
										});
									});
								}

								trigger({action: "trymode", on: $scope.trymode.on});
							};

							function checkSolution () {
								var board = $scope.board.board;
								var completed = 0;
								var result = true;
								var progress = [];

								var f = function (item) {
									progress[item.y][item.x].push({
										v: item.v,
										x: item.x,
										y: item.y,
										hidden: item.hidden
									});

									return !item.hidden;
								};

								for (var y=0; y<board.length; y++) {
									progress[y] = [];
									var row = board[y];
									for (var x=0; x<row.length; x++) {
										progress[y][x] = [];
										var cell = row[x].filter(f);

										completed += cell.length?cell.length:$scope.puzzle.grid.w;

										if (cell.length !== 1) {
											// return false;
											result = false;
										}
										else if (cell[0].v !== $scope.puzzle.solution[y][x]) {
											// return false;
											completed += $scope.puzzle.grid.w-1;
											result = false;
										}
									}
								}

								var w = $scope.puzzle.grid.w;
								var h = $scope.puzzle.grid.h;

								completed = Math.floor((1 - (completed - w*h) / (w*h*h-w*h))*100);

								if ($scope.puzzle.save &&
									completed !== 100 &&
									$scope.puzzle.completed !== 100
								) {
									packs.savePuzzleProgress(
										$stateParams.packIndex,
										$stateParams.gridIndex,
										$stateParams.puzzleIndex,
										completed,
										progress
									);
								}

								if (result) {
									play("win");

									$ionicPopup.alert({
										scope: $scope,
										title: "Congratulations",
										template: "You win, ready for next puzzle?",
										okText: "OK",
										okType: "button-positive"
									}).then(function () {
										function back () {
											if ($scope.puzzle.save &&
												completed === 100 &&
												$scope.puzzle.completed !== 100
											) {
												packs.savePuzzleProgress(
													$stateParams.packIndex,
													$stateParams.gridIndex,
													$stateParams.puzzleIndex,
													completed,
													progress
												).then(
													function () {
														if (+$stateParams.puzzleIndex === 24) {
															$location.path("/packs");
														}
														else {
															$ionicHistory.goBack();
														}
													},
													function () {
														$ionicHistory.goBack();
													}
												);
											}
											else {
												$ionicHistory.goBack();
											}
										}

										back();
									});
								}

								return result;
							}

							function restart () {
								var board = $scope.board.board;
								$scope.board.selected = undefined;
								var gameBoard = $scope.tutorialInit;

								for (var y=0; y<board.length; y++) {
									var row = board[y];
									for (var x=0; x<row.length; x++) {
										var cell = row[x];
										for (var j=0; j<cell.length; j++) {
											var item = cell[j];
											if (item.hidden) {
												item.hidden =
													gameBoard?gameBoard[y][x][j].hidden:false;

												cell.total+= item.hidden?0:1;
											}
										}
									}
								}

								checkSolution();
							}

							var restartLock = false;
							$scope.restart = function () {
								restartLock = true;
								$ionicPopup.confirm({
									scope: $scope,
									title: "Restart",
									template: "Restart Puzzle?"
								}).then(function (res) {
									restartLock = true;
									if (res) {
										restart();
									}
								});
							};

							$scope.toB = function (index) {
								play("click");
								$scope.board.clues.b.push($scope.board.clues.a[index]);
								$scope.board.clues.a.splice(index, 1);
								if ($scope.board.clues.a.length === 0) {
									$scope.board.clues.show = "B";
								}

								trigger({action: "toB"});
							};

							$scope.toA = function (index) {
								play("click");
								$scope.board.clues.a.push($scope.board.clues.b[index]);
								$scope.board.clues.b.splice(index, 1);

								if ($scope.board.clues.b.length === 0) {
									$scope.board.clues.show = "A";
								}

								trigger({action: "toA"});
							};

							$scope.switchClues = function () {
								play("click");
								switch ($scope.board.clues.show) {
									case "A": $scope.board.clues.show = "B"; break;
									case "B": $scope.board.clues.show = "F"; break;
									case "F": $scope.board.clues.show = "A"; break;
								}
								trigger({action: "switch", list: $scope.board.clues.show});
							};

							$scope.select = function (x, y, item, e) {
								play("click");

								trigger({action: "select", item: item});

								var filter;

								if (item) {
									filter = [];

									for (var i=0; i<$scope.board.clues.all.length; i++) {
										var clue = $scope.board.clues.all[i];
										if (clue.type !== "item" && (
												clue.a.v === item.v ||
												clue.b && clue.b.v === item.v
											)
										) {
											filter.push({
												type: clue.type,
												a: clue.a,
												b: clue.b
											});
										}
									}

									if ($scope.trymode.on) {
										var v = !item.tryHigthligth;
										$scope.board.board[y][x].forEach(function (cellItem) {
											if (cellItem === item) {
												cellItem.tryHigthligth = v;
											}
											else {
												cellItem.tryHigthligth = false;
											}
										});
									}
								}

								$scope.board.selected = {
									x: x,
									y: y,
									items: $scope.board.board[y][x],
									item: item,
									filter: filter
								};

								if (e) {
									e.stopPropagation();
								}
							};

							$scope.selectItem = function (index) {
								play("click");
								var item = $scope.board.selected.items[index];
								$scope.select(item.x, item.y, item);
							};

							var checkBoard = function () {};

							function removeItem (x, y, item) {
								play("remove");

								var items = $scope.board.board[y][x];
								items.total--;
								item.hidden = true;

								trigger({action: "remove", item: item});

								checkBoard();
							}

							function setItem (x, y, item) {
								play("add");

								var items = $scope.board.board[y][x];

								for (var i=0; i<items.length; i++) {
									items[i].hidden = true;
								}

								item.hidden = false;
								items.total = 1;

								checkBoard();
							}

							checkBoard = function () {
								// Check if there is only one item in a row but is not set,
								for (var y=0; y < $scope.board.board.length; y++) {
									var item;
									var items = {};
									var row = $scope.board.board[y];
									for (var x=0; x < row.length; x++) {
										var cell = row[x];
										for (var c=0; c < cell.length; c++) {
											item = cell[c];
											if (!item.hidden) {
												items[item.v] = items[item.v] || [];
												items[item.v].push({cell: cell, item: item});
											}
										}
									}

									for (var v in items) {
										if (items.hasOwnProperty(v)) {
											// Check alone items,
											if (
												items[v].length === 1 &&
												items[v][0].cell.total > 1
											) {
												item = items[v][0].item;
												return setItem(item.x, item.y, item);
											}

											// check if item is set, but is not removed
											// from other cell.
											if (items[v].length > 1) {
												var remove = false;
												for (var i=items[v].length-1; i>=0; i--) {
													if (items[v][i].cell.total === 1) {
														items[v].splice(i, 1);
														remove = true;
													}
												}

												if (remove && items[v].length > 0) {
													item = items[v][0].item;
													return removeItem(item.x, item.y, item);
												}
											}
										}
									}
								}

								checkSolution();
							};

							$scope.setItem = function () {
								var item = $scope.board.selected.item;
								var y = $scope.board.selected.y;
								var x = $scope.board.selected.x;

								if ($scope.settings.badchoice &&
									item.v !== $scope.puzzle.solution[y][x]
								) {
									play("alert");

									$ionicPopup.alert({
										scope: $scope,
										title: "Bad Choice",
										templateUrl: "templates/puzzle/badchoice.html",
										okText: "OK",
										okType: "button-positive"
									});
								}
								else {
									setItem(x, y, item);
								}
							};

							$scope.hideItem = function () {
								var y = $scope.board.selected.y;
								var x = $scope.board.selected.x;

								if ($scope.settings.badchoice &&
									$scope.board.selected.item.v === $scope.puzzle.solution[y][x]
								) {
									play("alert");

									$ionicPopup.alert({
										scope: $scope,
										title: "Bad Choice",
										templateUrl: "templates/puzzle/badchoice.html",
										okText: "OK",
										okType: "button-positive"
									});
								}
								else if (!$scope.board.selected.item.hidden) {
									var item = $scope.board.selected.item;
									removeItem(x, y, item);
								}
							};

							$scope.showItem = function () {
								play("add");

								$scope.board.selected.items.total++;
								$scope.board.selected.item.hidden = false;
								checkSolution();
							};

							$scope.getVisible = function (cell) {
								return cell.filter(function (item) {
									return !item.hidden;
								});
							};

							function showInitMessage (pack) {
								if (pack.type === "tutorial") {
									$timeout(function () {
										$scope.tutorialIntro.show();
									}, 500);
								}
							}

							function setupPack (pack) {
								var puzzle = pack.grid.puzzle;
								var gameBoard = puzzle.progress;

								if (
									pack.type === "tutorial"
								) {
									$scope.tutorialInit = JSON.parse(JSON.stringify(puzzle.progress));
								}

								showInitMessage(pack);

								puzzle.save = $stateParams.puzzleIndex !== "-1" &&
												puzzle.completed < 100 &&
												pack.type !== "tutorial";

								puzzle.progress = undefined;

								puzzle.index = +$stateParams.puzzleIndex;
								$scope.pack = pack;
								$scope.puzzle = puzzle;
								$scope.info = {
									packIndex: +$stateParams.packIndex,
									gridIndex: +$stateParams.gridIndex
								};

								var w = pack.grid.w;
								var h = pack.grid.h;

								var d = Math.ceil(w/2);

								if (!gameBoard) {
									gameBoard = [];

									for (var y=0; y<h; y++) {
										var row = gameBoard[y] = gameBoard[y] || [];
										for (var x=0; x<w; x++) {
											var cell = row[x] = row[x] || [];

											cell.total = 0;
											for (var i=0; i<w; i++) {
												var item = {v: "var_" + y + "_" + i, x: x, y: y};
												item.hidden =
													puzzle.completed === 100 &&
													puzzle.solution[y][x] !== item.v;

												cell.push(item);

												if (!item.hidden) {
													cell.total++;
												}
											}
										}
									}

								}
								else {
									gameBoard.forEach(function (lines) {
										lines.forEach(function (cell) {
											cell.total = cell.filter(function (item) {
												return !item.hidden;
											}).length;
										});
									});
								}

								/* TODO: rename board to game */
								var board = {
									grid: {w: pack.grid.w, h: pack.grid.h},
									board: gameBoard,
									clues: {
										all: puzzle.clues,
										a: puzzle.clues.slice(),
										b: [],
										show: "A"
									},
									geometry: {w: 16*d*w, h: 16*2*h, bh: 30, clues: {w: 500}}
								};

								function geometry () {
									play("flip");

									var title = 50;
									var vh = $window.innerHeight < 300?300:$window.innerHeight;
									var bars = Math.floor((vh-title)/(h+2));

									if (bars < 32) {
										bars = 32;
									}
									else if (bars > 96) {
										bars = 96;
									}

									var gh = vh-title-bars;
									var gw = gh*w/h;

									if (gw>$window.innerWidth) {
										gw = $window.innerWidth;
										gh = gw*h/w;
										bars = $window.innerHeight-title-gh;

										if (bars < 32) {
											bars = 32;
										}
										else if (bars > 96) {
											bars = 96;
										}
									}

									board.geometry.w = gw;
									board.geometry.h = gh;
									board.geometry.bh = Math.floor(bars/2);

									board.geometry.clues.w = $window.innerWidth-48;
								}

								geometry();
								$scope.board = board;

								$scope.$watch($scope.getWindowSize, geometry, true);
								$scope.loadingEnd();
							}

							if ($stateParams.puzzleIndex === "-1") {
								$scope.tutorial = true;
								setupPack(
									{
										"id": -1,
										"name": "Tutorial",
										"grid": {
											"w": 4,
											"h": 4,
											"puzzle": {
												"grid": {"w": 4,"h": 4},
												"solution": [
													["var_0_2","var_0_3","var_0_0","var_0_1"],
													["var_1_1","var_1_0","var_1_3","var_1_2"],
													["var_2_2","var_2_0","var_2_1","var_2_3"],
													["var_3_0","var_3_1","var_3_2","var_3_3"]
												],
												"clues": [
													{
														"type": "middle",
														"a": {"v": "var_0_3","y": 0}
													},
													{
														"type": "immediately to the left of",
														"a": {"v": "var_1_1","y": 1},
														"b": {"v": "var_0_3","y": 0}
													},
													{
														"type": "immediately to the left of",
														"a": {"v": "var_2_0","y": 2},
														"b": {"v": "var_1_3","y": 1}
													},
													{
														"type": "immediately to the left of",
														"a": {"v": "var_3_2","y": 3},
														"b": {"v": "var_3_3","y": 3}
													},
													{
														"type": "immediately to the left of",
														"a": {"v": "var_1_3","y": 1},
														"b": {"v": "var_2_3","y": 2}
													},
													{
														"type": "immediately to the left of",
														"a": {"v": "var_1_0","y": 1},
														"b": {"v": "var_1_3","y": 1}
													},
													{
														"type": "immediately to the left of",
														"a": {"v": "var_2_2","y": 2},
														"b": {"v": "var_0_3","y": 0}
													},
													{
														"type": "immediately to the left of",
														"a": {"v": "var_0_2","y": 0},
														"b": {"v": "var_1_0","y": 1}
													},
													{
														"type": "same position as",
														"a": {"v": "var_0_2","y": 0},
														"b": {"v": "var_3_0","y": 3}
													},
													{
														"type": "same position as",
														"a": {"v": "var_0_0","y": 0},
														"b": {"v": "var_3_2","y": 3}
													},
													{
														"type": "next to",
														"a": {"v": "var_3_1","y": 3},
														"b": {"v": "var_1_3","y": 1}
													},
													{
														"type": "next to",
														"a": {"v": "var_2_1","y": 2},
														"b": {"v": "var_1_2","y": 1}
													}
												]
											}
										}
									}
								);
							}
							else {
								packs.getPuzzle(
									$stateParams.packIndex,
									$stateParams.gridIndex,
									$stateParams.puzzleIndex
								).then(setupPack);
							}

						}]);
					},
					"puzzles.js": function (exports, module, require) {
						var zebra = require("../zebra.js");

						zebra.controller("PuzzlesCtrl", [
							"$scope", "packs", "$stateParams", "$interval",
							"$state", "$ionicModal",
						function (
							$scope,
							packs,
							$stateParams,
							$interval,
							$state
						) {
							"use strict";
							$scope.loadingStart();

							packs.getPuzzles($stateParams.packIndex, $stateParams.gridIndex).then(
								function (pack) {
									$scope.pack = pack;
									$scope.puzzles = pack.grid.puzzles;

									$scope.openPuzzle = function (index) {
										$state.go(
											"packs.pack.puzzles.puzzle",
											{"puzzleIndex": index}
										);
									};

									$scope.loadingEnd();
								}
							);
						}]);
					},
					"tutorial.js": function (exports, module, require) {
						var zebra = require("../zebra.js");

						zebra.controller("TutorialCtrl", [
							"$scope",
						function (
							$scope
						) {
							"use strict";

							$scope.state = "start";
							var states = [
								"start",
								"clues-meaning",
								"clues-1",
								"clues-1-remove",
								"clues-1-2",
								"clues-1-2-remove",
								"organize",
								"organize-AB",
								"filter",
								"filter-select",
								"try-mode",
								"try-select",
								"try-remove-select",
								"try-remove",
								"try-remove-select-1",
								"try-remove-1",
								"end"
							];

							function check (msg, action, x, y, v) {
								if (msg.action !== action) {
									return false;
								}

								if (!msg.item) {
									return true;
								}

								if (x!==undefined && y!==undefined && v!==undefined) {
									var item = msg.item;
									return item.x === x &&
										item.y === y &&
										item.v === v
									;
								}
								else {
									return true;
								}
							}

							var filterCount = 1;
							var trySelectCount = [];

							function message (msg) {
								if (filterCount === 0) {
									$scope.next("filter-select");
									filterCount--;
								}

								if (
									check(msg, "remove", 1, 0, "var_0_3") ||
									check(msg, "remove", 2, 0, "var_0_3") ||
									check(msg, "remove", 0, 1, "var_1_1") ||
									check(msg, "remove", 1, 1, "var_1_1")
								) {
									if (trySelectCount.indexOf(msg.item) === -1) {
										trySelectCount.push(msg.item);
									}
								}

								if (check(msg, "closeHandbook")) {
									$scope.next("clues-meaning");
								}
								else if (
									$scope.state === "try-select" && (
										check(msg, "select", 1, 0, "var_0_3") ||
										check(msg, "select", 2, 0, "var_0_3") ||
										check(msg, "select", 0, 1, "var_1_1") ||
										check(msg, "select", 1, 1, "var_1_1")
									)
								) {
									if (trySelectCount.indexOf(msg.item) === -1) {
										trySelectCount.push(msg.item);
									}

									if (trySelectCount.length === 4) {
										$scope.next("try-select");
									}
								}
								else if (
									$scope.state === "filter-select" &&
									check(msg, "select")
								) {
									filterCount--;
									if (filterCount < 0) {
										$scope.next("filter-select");
									}
								}
								else if (check(msg, "select", 0, 0, "var_0_3")) {
									$scope.next("clues-1");
								}
								else if (check(msg, "remove", 0, 0, "var_0_3")) {
									$scope.next("clues-1-remove");
								}
								else if (check(msg, "select", 3, 0, "var_0_3")) {
									$scope.next("clues-1-2");
								}
								else if (check(msg, "remove", 3, 0, "var_0_3")) {
									$scope.next("clues-1-2-remove");
								}
								else if (check(msg, "toA") || check(msg, "toB")) {
									$scope.next("organize");
								}
								else if (check(msg, "switch")) {
									$scope.next("organize-AB");
									if (msg.list === "F") {
										$scope.next("filter");
									}
								}
								else if (check(msg, "trymode")) {
									if (msg.on) {
										$scope.next("try-mode");
									}
								}
								else if (check(msg, "select", 3, 0, "var_0_3")) {
									$scope.next("clues-1-2");
								}
								else if (
									check(msg, "select", 2, 1, "var_1_1")
								) {
									$scope.next("try-remove-select");
								}
								else if (
									check(msg, "remove", 2, 1, "var_1_1")
								) {
									$scope.next("try-remove-select");
									$scope.next("try-remove");
								}
								else if (
									check(msg, "select", 3, 1, "var_1_1")
								) {
									$scope.next("try-remove-select-1");
								}
								else if (
									check(msg, "remove", 3, 1, "var_1_1")
								) {
									$scope.next("try-remove-select-1");
									$scope.next("try-remove-1");
								}
							}

							$scope.$parent.setTrigger(message);

							$scope.setFace = function () {
								angular.element(document.querySelector(".hand")).remove();
								angular.element(document.querySelector(".hand")).remove();
								angular.element(document.querySelector(".hand")).remove();
								angular.element(document.querySelector(".hand")).remove();

								$scope.face = Math.floor(Math.random()*100)%6;
							};

							$scope.setFace();

							$scope.next = function (state) {
								state = state || $scope.state;

								var index = states.indexOf(state);
								if (index !== -1) {
									$scope.setFace();

									if (
										index > 0 && state === "try-mode"
									) {
										index = 0;
									}
									else {
										states.splice(index, 1);
									}

									if (
										state === "clues-1-2-remove" && index > 0
									) {
										index = 0;
									}

									if (states[index] === "end" && states.length > 1) {
										$scope.state = states[0];
									}
									else {
										$scope.state = states[index];
									}

									switch ($scope.state) {
										case "clues-meaning":
											angular.element(
												document.querySelector("#handbook")
											).append("<div class='hand'></div>");
											break;

										case "clues-1":
											angular.element(
												document.querySelector("#var_0_3__P0x0")
											).append("<div class='hand'></div>");
											break;

										case "try-remove":
										case "try-remove-1":
										case "clues-1-2-remove":
										case "clues-1-remove":
											angular.element(
												document.querySelector("#remove")
											).append("<div class='hand'></div>");
											break;

										case "clues-1-2":
											angular.element(
												document.querySelector("#var_0_3__P3x0")
											).append("<div class='hand'></div>");
											break;

										case "organize":
											angular.element(
												document.querySelector("#clue_middle-var_0_3")
											).append("<div class='hand'></div>");
											break;

										case "filter":
										case "organize-AB":
											angular.element(
												document.querySelector("#switch-clues")
											).append("<div class='hand'></div>");
											break;

										case "filter-select":
											angular.element(
												document.querySelector("#var_0_0__P0x0")
											).append("<div class='hand'></div>");
											angular.element(
												document.querySelector("#var_0_3__P1x0")
											).append("<div class='hand'></div>");
											break;

										case "try-mode":
											angular.element(
												document.querySelector("#try-mode")
											).append("<div class='hand'></div>");
											break;

										case "try-select":
											angular.element(
												document.querySelector("#var_1_1__P0x1")
											).append("<div class='hand'></div>");

											angular.element(
												document.querySelector("#var_1_1__P1x1")
											).append("<div class='hand'></div>");

											angular.element(
												document.querySelector("#var_0_3__P1x0")
											).append("<div class='hand'></div>");

											angular.element(
												document.querySelector("#var_0_3__P2x0")
											).append("<div class='hand'></div>");
											break;

										case "try-remove-select":
											angular.element(
												document.querySelector("#var_1_1__P2x1")
											).append("<div class='hand'></div>");
											break;

										case "try-remove-select-1":
											angular.element(
												document.querySelector("#var_1_1__P3x1")
											).append("<div class='hand'></div>");
											break;
									}
								}
							};

						}]);
					}
				},
				"libs": {
					"ed.js": function (exports, module, require) {
						"use strict";function q(a){throw a;}var s=void 0,u=!1;var sjcl={cipher:{},hash:{},keyexchange:{},mode:{},misc:{},codec:{},exception:{corrupt:function(a){this.toString=function(){return"CORRUPT: "+this.message};this.message=a},invalid:function(a){this.toString=function(){return"INVALID: "+this.message};this.message=a},bug:function(a){this.toString=function(){return"BUG: "+this.message};this.message=a},notReady:function(a){this.toString=function(){return"NOT READY: "+this.message};this.message=a}}};
						"undefined"!==typeof module&&module.exports&&(module.exports=sjcl);"function"===typeof define&&define([],function(){return sjcl});
						sjcl.cipher.aes=function(a){this.k[0][0][0]||this.D();var b,c,d,e,f=this.k[0][4],g=this.k[1];b=a.length;var h=1;4!==b&&(6!==b&&8!==b)&&q(new sjcl.exception.invalid("invalid aes key size"));this.b=[d=a.slice(0),e=[]];for(a=b;a<4*b+28;a++){c=d[a-1];if(0===a%b||8===b&&4===a%b)c=f[c>>>24]<<24^f[c>>16&255]<<16^f[c>>8&255]<<8^f[c&255],0===a%b&&(c=c<<8^c>>>24^h<<24,h=h<<1^283*(h>>7));d[a]=d[a-b]^c}for(b=0;a;b++,a--)c=d[b&3?a:a-4],e[b]=4>=a||4>b?c:g[0][f[c>>>24]]^g[1][f[c>>16&255]]^g[2][f[c>>8&255]]^g[3][f[c&
						255]]};
						sjcl.cipher.aes.prototype={encrypt:function(a){return w(this,a,0)},decrypt:function(a){return w(this,a,1)},k:[[[],[],[],[],[]],[[],[],[],[],[]]],D:function(){var a=this.k[0],b=this.k[1],c=a[4],d=b[4],e,f,g,h=[],l=[],k,n,m,p;for(e=0;0x100>e;e++)l[(h[e]=e<<1^283*(e>>7))^e]=e;for(f=g=0;!c[f];f^=k||1,g=l[g]||1){m=g^g<<1^g<<2^g<<3^g<<4;m=m>>8^m&255^99;c[f]=m;d[m]=f;n=h[e=h[k=h[f]]];p=0x1010101*n^0x10001*e^0x101*k^0x1010100*f;n=0x101*h[m]^0x1010100*m;for(e=0;4>e;e++)a[e][f]=n=n<<24^n>>>8,b[e][m]=p=p<<24^p>>>8}for(e=
						0;5>e;e++)a[e]=a[e].slice(0),b[e]=b[e].slice(0)}};
						function w(a,b,c){4!==b.length&&q(new sjcl.exception.invalid("invalid aes block size"));var d=a.b[c],e=b[0]^d[0],f=b[c?3:1]^d[1],g=b[2]^d[2];b=b[c?1:3]^d[3];var h,l,k,n=d.length/4-2,m,p=4,t=[0,0,0,0];h=a.k[c];a=h[0];var r=h[1],v=h[2],y=h[3],z=h[4];for(m=0;m<n;m++)h=a[e>>>24]^r[f>>16&255]^v[g>>8&255]^y[b&255]^d[p],l=a[f>>>24]^r[g>>16&255]^v[b>>8&255]^y[e&255]^d[p+1],k=a[g>>>24]^r[b>>16&255]^v[e>>8&255]^y[f&255]^d[p+2],b=a[b>>>24]^r[e>>16&255]^v[f>>8&255]^y[g&255]^d[p+3],p+=4,e=h,f=l,g=k;for(m=0;4>
						m;m++)t[c?3&-m:m]=z[e>>>24]<<24^z[f>>16&255]<<16^z[g>>8&255]<<8^z[b&255]^d[p++],h=e,e=f,f=g,g=b,b=h;return t}
						sjcl.bitArray={bitSlice:function(a,b,c){a=sjcl.bitArray.P(a.slice(b/32),32-(b&31)).slice(1);return c===s?a:sjcl.bitArray.clamp(a,c-b)},extract:function(a,b,c){var d=Math.floor(-b-c&31);return((b+c-1^b)&-32?a[b/32|0]<<32-d^a[b/32+1|0]>>>d:a[b/32|0]>>>d)&(1<<c)-1},concat:function(a,b){if(0===a.length||0===b.length)return a.concat(b);var c=a[a.length-1],d=sjcl.bitArray.getPartial(c);return 32===d?a.concat(b):sjcl.bitArray.P(b,d,c|0,a.slice(0,a.length-1))},bitLength:function(a){var b=a.length;return 0===
						b?0:32*(b-1)+sjcl.bitArray.getPartial(a[b-1])},clamp:function(a,b){if(32*a.length<b)return a;a=a.slice(0,Math.ceil(b/32));var c=a.length;b&=31;0<c&&b&&(a[c-1]=sjcl.bitArray.partial(b,a[c-1]&2147483648>>b-1,1));return a},partial:function(a,b,c){return 32===a?b:(c?b|0:b<<32-a)+0x10000000000*a},getPartial:function(a){return Math.round(a/0x10000000000)||32},equal:function(a,b){if(sjcl.bitArray.bitLength(a)!==sjcl.bitArray.bitLength(b))return u;var c=0,d;for(d=0;d<a.length;d++)c|=a[d]^b[d];return 0===
						c},P:function(a,b,c,d){var e;e=0;for(d===s&&(d=[]);32<=b;b-=32)d.push(c),c=0;if(0===b)return d.concat(a);for(e=0;e<a.length;e++)d.push(c|a[e]>>>b),c=a[e]<<32-b;e=a.length?a[a.length-1]:0;a=sjcl.bitArray.getPartial(e);d.push(sjcl.bitArray.partial(b+a&31,32<b+a?c:d.pop(),1));return d},l:function(a,b){return[a[0]^b[0],a[1]^b[1],a[2]^b[2],a[3]^b[3]]},byteswapM:function(a){var b,c;for(b=0;b<a.length;++b)c=a[b],a[b]=c>>>24|c>>>8&0xff00|(c&0xff00)<<8|c<<24;return a}};
						sjcl.codec.utf8String={fromBits:function(a){var b="",c=sjcl.bitArray.bitLength(a),d,e;for(d=0;d<c/8;d++)0===(d&3)&&(e=a[d/4]),b+=String.fromCharCode(e>>>24),e<<=8;return decodeURIComponent(escape(b))},toBits:function(a){a=unescape(encodeURIComponent(a));var b=[],c,d=0;for(c=0;c<a.length;c++)d=d<<8|a.charCodeAt(c),3===(c&3)&&(b.push(d),d=0);c&3&&b.push(sjcl.bitArray.partial(8*(c&3),d));return b}};
						sjcl.codec.hex={fromBits:function(a){var b="",c;for(c=0;c<a.length;c++)b+=((a[c]|0)+0xf00000000000).toString(16).substr(4);return b.substr(0,sjcl.bitArray.bitLength(a)/4)},toBits:function(a){var b,c=[],d;a=a.replace(/\s|0x/g,"");d=a.length;a+="00000000";for(b=0;b<a.length;b+=8)c.push(parseInt(a.substr(b,8),16)^0);return sjcl.bitArray.clamp(c,4*d)}};
						sjcl.codec.base64={J:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",fromBits:function(a,b,c){var d="",e=0,f=sjcl.codec.base64.J,g=0,h=sjcl.bitArray.bitLength(a);c&&(f=f.substr(0,62)+"-_");for(c=0;6*d.length<h;)d+=f.charAt((g^a[c]>>>e)>>>26),6>e?(g=a[c]<<6-e,e+=26,c++):(g<<=6,e-=6);for(;d.length&3&&!b;)d+="=";return d},toBits:function(a,b){a=a.replace(/\s|=/g,"");var c=[],d,e=0,f=sjcl.codec.base64.J,g=0,h;b&&(f=f.substr(0,62)+"-_");for(d=0;d<a.length;d++)h=f.indexOf(a.charAt(d)),
						0>h&&q(new sjcl.exception.invalid("this isn't base64!")),26<e?(e-=26,c.push(g^h>>>e),g=h<<32-e):(e+=6,g^=h<<32-e);e&56&&c.push(sjcl.bitArray.partial(e&56,g,1));return c}};sjcl.codec.base64url={fromBits:function(a){return sjcl.codec.base64.fromBits(a,1,1)},toBits:function(a){return sjcl.codec.base64.toBits(a,1)}};sjcl.hash.sha256=function(a){this.b[0]||this.D();a?(this.r=a.r.slice(0),this.o=a.o.slice(0),this.h=a.h):this.reset()};sjcl.hash.sha256.hash=function(a){return(new sjcl.hash.sha256).update(a).finalize()};
						sjcl.hash.sha256.prototype={blockSize:512,reset:function(){this.r=this.N.slice(0);this.o=[];this.h=0;return this},update:function(a){"string"===typeof a&&(a=sjcl.codec.utf8String.toBits(a));var b,c=this.o=sjcl.bitArray.concat(this.o,a);b=this.h;a=this.h=b+sjcl.bitArray.bitLength(a);for(b=512+b&-512;b<=a;b+=512)x(this,c.splice(0,16));return this},finalize:function(){var a,b=this.o,c=this.r,b=sjcl.bitArray.concat(b,[sjcl.bitArray.partial(1,1)]);for(a=b.length+2;a&15;a++)b.push(0);b.push(Math.floor(this.h/
						4294967296));for(b.push(this.h|0);b.length;)x(this,b.splice(0,16));this.reset();return c},N:[],b:[],D:function(){function a(a){return 0x100000000*(a-Math.floor(a))|0}var b=0,c=2,d;a:for(;64>b;c++){for(d=2;d*d<=c;d++)if(0===c%d)continue a;8>b&&(this.N[b]=a(Math.pow(c,0.5)));this.b[b]=a(Math.pow(c,1/3));b++}}};
						function x(a,b){var c,d,e,f=b.slice(0),g=a.r,h=a.b,l=g[0],k=g[1],n=g[2],m=g[3],p=g[4],t=g[5],r=g[6],v=g[7];for(c=0;64>c;c++)16>c?d=f[c]:(d=f[c+1&15],e=f[c+14&15],d=f[c&15]=(d>>>7^d>>>18^d>>>3^d<<25^d<<14)+(e>>>17^e>>>19^e>>>10^e<<15^e<<13)+f[c&15]+f[c+9&15]|0),d=d+v+(p>>>6^p>>>11^p>>>25^p<<26^p<<21^p<<7)+(r^p&(t^r))+h[c],v=r,r=t,t=p,p=m+d|0,m=n,n=k,k=l,l=d+(k&n^m&(k^n))+(k>>>2^k>>>13^k>>>22^k<<30^k<<19^k<<10)|0;g[0]=g[0]+l|0;g[1]=g[1]+k|0;g[2]=g[2]+n|0;g[3]=g[3]+m|0;g[4]=g[4]+p|0;g[5]=g[5]+t|0;g[6]=
						g[6]+r|0;g[7]=g[7]+v|0}
						sjcl.mode.ccm={name:"ccm",encrypt:function(a,b,c,d,e){var f,g=b.slice(0),h=sjcl.bitArray,l=h.bitLength(c)/8,k=h.bitLength(g)/8;e=e||64;d=d||[];7>l&&q(new sjcl.exception.invalid("ccm: iv must be at least 7 bytes"));for(f=2;4>f&&k>>>8*f;f++);f<15-l&&(f=15-l);c=h.clamp(c,8*(15-f));b=sjcl.mode.ccm.L(a,b,c,d,e,f);g=sjcl.mode.ccm.p(a,g,c,b,e,f);return h.concat(g.data,g.tag)},decrypt:function(a,b,c,d,e){e=e||64;d=d||[];var f=sjcl.bitArray,g=f.bitLength(c)/8,h=f.bitLength(b),l=f.clamp(b,h-e),k=f.bitSlice(b,
						h-e),h=(h-e)/8;7>g&&q(new sjcl.exception.invalid("ccm: iv must be at least 7 bytes"));for(b=2;4>b&&h>>>8*b;b++);b<15-g&&(b=15-g);c=f.clamp(c,8*(15-b));l=sjcl.mode.ccm.p(a,l,c,k,e,b);a=sjcl.mode.ccm.L(a,l.data,c,d,e,b);f.equal(l.tag,a)||q(new sjcl.exception.corrupt("ccm: tag doesn't match"));return l.data},L:function(a,b,c,d,e,f){var g=[],h=sjcl.bitArray,l=h.l;e/=8;(e%2||4>e||16<e)&&q(new sjcl.exception.invalid("ccm: invalid tag length"));(0xffffffff<d.length||0xffffffff<b.length)&&q(new sjcl.exception.bug("ccm: can't deal with 4GiB or more data"));
						f=[h.partial(8,(d.length?64:0)|e-2<<2|f-1)];f=h.concat(f,c);f[3]|=h.bitLength(b)/8;f=a.encrypt(f);if(d.length){c=h.bitLength(d)/8;65279>=c?g=[h.partial(16,c)]:0xffffffff>=c&&(g=h.concat([h.partial(16,65534)],[c]));g=h.concat(g,d);for(d=0;d<g.length;d+=4)f=a.encrypt(l(f,g.slice(d,d+4).concat([0,0,0])))}for(d=0;d<b.length;d+=4)f=a.encrypt(l(f,b.slice(d,d+4).concat([0,0,0])));return h.clamp(f,8*e)},p:function(a,b,c,d,e,f){var g,h=sjcl.bitArray;g=h.l;var l=b.length,k=h.bitLength(b);c=h.concat([h.partial(8,
						f-1)],c).concat([0,0,0]).slice(0,4);d=h.bitSlice(g(d,a.encrypt(c)),0,e);if(!l)return{tag:d,data:[]};for(g=0;g<l;g+=4)c[3]++,e=a.encrypt(c),b[g]^=e[0],b[g+1]^=e[1],b[g+2]^=e[2],b[g+3]^=e[3];return{tag:d,data:h.clamp(b,k)}}};
						sjcl.mode.ocb2={name:"ocb2",encrypt:function(a,b,c,d,e,f){128!==sjcl.bitArray.bitLength(c)&&q(new sjcl.exception.invalid("ocb iv must be 128 bits"));var g,h=sjcl.mode.ocb2.H,l=sjcl.bitArray,k=l.l,n=[0,0,0,0];c=h(a.encrypt(c));var m,p=[];d=d||[];e=e||64;for(g=0;g+4<b.length;g+=4)m=b.slice(g,g+4),n=k(n,m),p=p.concat(k(c,a.encrypt(k(c,m)))),c=h(c);m=b.slice(g);b=l.bitLength(m);g=a.encrypt(k(c,[0,0,0,b]));m=l.clamp(k(m.concat([0,0,0]),g),b);n=k(n,k(m.concat([0,0,0]),g));n=a.encrypt(k(n,k(c,h(c))));d.length&&
						(n=k(n,f?d:sjcl.mode.ocb2.pmac(a,d)));return p.concat(l.concat(m,l.clamp(n,e)))},decrypt:function(a,b,c,d,e,f){128!==sjcl.bitArray.bitLength(c)&&q(new sjcl.exception.invalid("ocb iv must be 128 bits"));e=e||64;var g=sjcl.mode.ocb2.H,h=sjcl.bitArray,l=h.l,k=[0,0,0,0],n=g(a.encrypt(c)),m,p,t=sjcl.bitArray.bitLength(b)-e,r=[];d=d||[];for(c=0;c+4<t/32;c+=4)m=l(n,a.decrypt(l(n,b.slice(c,c+4)))),k=l(k,m),r=r.concat(m),n=g(n);p=t-32*c;m=a.encrypt(l(n,[0,0,0,p]));m=l(m,h.clamp(b.slice(c),p).concat([0,0,0]));
						k=l(k,m);k=a.encrypt(l(k,l(n,g(n))));d.length&&(k=l(k,f?d:sjcl.mode.ocb2.pmac(a,d)));h.equal(h.clamp(k,e),h.bitSlice(b,t))||q(new sjcl.exception.corrupt("ocb: tag doesn't match"));return r.concat(h.clamp(m,p))},pmac:function(a,b){var c,d=sjcl.mode.ocb2.H,e=sjcl.bitArray,f=e.l,g=[0,0,0,0],h=a.encrypt([0,0,0,0]),h=f(h,d(d(h)));for(c=0;c+4<b.length;c+=4)h=d(h),g=f(g,a.encrypt(f(h,b.slice(c,c+4))));c=b.slice(c);128>e.bitLength(c)&&(h=f(h,d(h)),c=e.concat(c,[-2147483648,0,0,0]));g=f(g,c);return a.encrypt(f(d(f(h,
						d(h))),g))},H:function(a){return[a[0]<<1^a[1]>>>31,a[1]<<1^a[2]>>>31,a[2]<<1^a[3]>>>31,a[3]<<1^135*(a[0]>>>31)]}};
						sjcl.mode.gcm={name:"gcm",encrypt:function(a,b,c,d,e){var f=b.slice(0);b=sjcl.bitArray;d=d||[];a=sjcl.mode.gcm.p(!0,a,f,d,c,e||128);return b.concat(a.data,a.tag)},decrypt:function(a,b,c,d,e){var f=b.slice(0),g=sjcl.bitArray,h=g.bitLength(f);e=e||128;d=d||[];e<=h?(b=g.bitSlice(f,h-e),f=g.bitSlice(f,0,h-e)):(b=f,f=[]);a=sjcl.mode.gcm.p(u,a,f,d,c,e);g.equal(a.tag,b)||q(new sjcl.exception.corrupt("gcm: tag doesn't match"));return a.data},Z:function(a,b){var c,d,e,f,g,h=sjcl.bitArray.l;e=[0,0,0,0];f=b.slice(0);
						for(c=0;128>c;c++){(d=0!==(a[Math.floor(c/32)]&1<<31-c%32))&&(e=h(e,f));g=0!==(f[3]&1);for(d=3;0<d;d--)f[d]=f[d]>>>1|(f[d-1]&1)<<31;f[0]>>>=1;g&&(f[0]^=-0x1f000000)}return e},g:function(a,b,c){var d,e=c.length;b=b.slice(0);for(d=0;d<e;d+=4)b[0]^=0xffffffff&c[d],b[1]^=0xffffffff&c[d+1],b[2]^=0xffffffff&c[d+2],b[3]^=0xffffffff&c[d+3],b=sjcl.mode.gcm.Z(b,a);return b},p:function(a,b,c,d,e,f){var g,h,l,k,n,m,p,t,r=sjcl.bitArray;m=c.length;p=r.bitLength(c);t=r.bitLength(d);h=r.bitLength(e);g=b.encrypt([0,
						0,0,0]);96===h?(e=e.slice(0),e=r.concat(e,[1])):(e=sjcl.mode.gcm.g(g,[0,0,0,0],e),e=sjcl.mode.gcm.g(g,e,[0,0,Math.floor(h/0x100000000),h&0xffffffff]));h=sjcl.mode.gcm.g(g,[0,0,0,0],d);n=e.slice(0);d=h.slice(0);a||(d=sjcl.mode.gcm.g(g,h,c));for(k=0;k<m;k+=4)n[3]++,l=b.encrypt(n),c[k]^=l[0],c[k+1]^=l[1],c[k+2]^=l[2],c[k+3]^=l[3];c=r.clamp(c,p);a&&(d=sjcl.mode.gcm.g(g,h,c));a=[Math.floor(t/0x100000000),t&0xffffffff,Math.floor(p/0x100000000),p&0xffffffff];d=sjcl.mode.gcm.g(g,d,a);l=b.encrypt(e);d[0]^=l[0];
						d[1]^=l[1];d[2]^=l[2];d[3]^=l[3];return{tag:r.bitSlice(d,0,f),data:c}}};sjcl.misc.hmac=function(a,b){this.M=b=b||sjcl.hash.sha256;var c=[[],[]],d,e=b.prototype.blockSize/32;this.n=[new b,new b];a.length>e&&(a=b.hash(a));for(d=0;d<e;d++)c[0][d]=a[d]^909522486,c[1][d]=a[d]^1549556828;this.n[0].update(c[0]);this.n[1].update(c[1]);this.G=new b(this.n[0])};
						sjcl.misc.hmac.prototype.encrypt=sjcl.misc.hmac.prototype.mac=function(a){this.Q&&q(new sjcl.exception.invalid("encrypt on already updated hmac called!"));this.update(a);return this.digest(a)};sjcl.misc.hmac.prototype.reset=function(){this.G=new this.M(this.n[0]);this.Q=u};sjcl.misc.hmac.prototype.update=function(a){this.Q=!0;this.G.update(a)};sjcl.misc.hmac.prototype.digest=function(){var a=this.G.finalize(),a=(new this.M(this.n[1])).update(a).finalize();this.reset();return a};
						sjcl.misc.pbkdf2=function(a,b,c,d,e){c=c||1E3;(0>d||0>c)&&q(sjcl.exception.invalid("invalid params to pbkdf2"));"string"===typeof a&&(a=sjcl.codec.utf8String.toBits(a));"string"===typeof b&&(b=sjcl.codec.utf8String.toBits(b));e=e||sjcl.misc.hmac;a=new e(a);var f,g,h,l,k=[],n=sjcl.bitArray;for(l=1;32*k.length<(d||1);l++){e=f=a.encrypt(n.concat(b,[l]));for(g=1;g<c;g++){f=a.encrypt(f);for(h=0;h<f.length;h++)e[h]^=f[h]}k=k.concat(e)}d&&(k=n.clamp(k,d));return k};
						sjcl.prng=function(a){this.c=[new sjcl.hash.sha256];this.i=[0];this.F=0;this.s={};this.C=0;this.K={};this.O=this.d=this.j=this.W=0;this.b=[0,0,0,0,0,0,0,0];this.f=[0,0,0,0];this.A=s;this.B=a;this.q=u;this.w={progress:{},seeded:{}};this.m=this.V=0;this.t=1;this.u=2;this.S=0x10000;this.I=[0,48,64,96,128,192,0x100,384,512,768,1024];this.T=3E4;this.R=80};
						sjcl.prng.prototype={randomWords:function(a,b){var c=[],d;d=this.isReady(b);var e;d===this.m&&q(new sjcl.exception.notReady("generator isn't seeded"));if(d&this.u){d=!(d&this.t);e=[];var f=0,g;this.O=e[0]=(new Date).valueOf()+this.T;for(g=0;16>g;g++)e.push(0x100000000*Math.random()|0);for(g=0;g<this.c.length&&!(e=e.concat(this.c[g].finalize()),f+=this.i[g],this.i[g]=0,!d&&this.F&1<<g);g++);this.F>=1<<this.c.length&&(this.c.push(new sjcl.hash.sha256),this.i.push(0));this.d-=f;f>this.j&&(this.j=f);this.F++;
						this.b=sjcl.hash.sha256.hash(this.b.concat(e));this.A=new sjcl.cipher.aes(this.b);for(d=0;4>d&&!(this.f[d]=this.f[d]+1|0,this.f[d]);d++);}for(d=0;d<a;d+=4)0===(d+1)%this.S&&A(this),e=B(this),c.push(e[0],e[1],e[2],e[3]);A(this);return c.slice(0,a)},setDefaultParanoia:function(a,b){0===a&&"Setting paranoia=0 will ruin your security; use it only for testing"!==b&&q("Setting paranoia=0 will ruin your security; use it only for testing");this.B=a},addEntropy:function(a,b,c){c=c||"user";var d,e,f=(new Date).valueOf(),
						g=this.s[c],h=this.isReady(),l=0;d=this.K[c];d===s&&(d=this.K[c]=this.W++);g===s&&(g=this.s[c]=0);this.s[c]=(this.s[c]+1)%this.c.length;switch(typeof a){case "number":b===s&&(b=1);this.c[g].update([d,this.C++,1,b,f,1,a|0]);break;case "object":c=Object.prototype.toString.call(a);if("[object Uint32Array]"===c){e=[];for(c=0;c<a.length;c++)e.push(a[c]);a=e}else{"[object Array]"!==c&&(l=1);for(c=0;c<a.length&&!l;c++)"number"!==typeof a[c]&&(l=1)}if(!l){if(b===s)for(c=b=0;c<a.length;c++)for(e=a[c];0<e;)b++,
						e>>>=1;this.c[g].update([d,this.C++,2,b,f,a.length].concat(a))}break;case "string":b===s&&(b=a.length);this.c[g].update([d,this.C++,3,b,f,a.length]);this.c[g].update(a);break;default:l=1}l&&q(new sjcl.exception.bug("random: addEntropy only supports number, array of numbers or string"));this.i[g]+=b;this.d+=b;h===this.m&&(this.isReady()!==this.m&&C("seeded",Math.max(this.j,this.d)),C("progress",this.getProgress()))},isReady:function(a){a=this.I[a!==s?a:this.B];return this.j&&this.j>=a?this.i[0]>this.R&&
						(new Date).valueOf()>this.O?this.u|this.t:this.t:this.d>=a?this.u|this.m:this.m},getProgress:function(a){a=this.I[a?a:this.B];return this.j>=a?1:this.d>a?1:this.d/a},startCollectors:function(){this.q||(this.a={loadTimeCollector:D(this,this.aa),mouseCollector:D(this,this.ba),keyboardCollector:D(this,this.$),accelerometerCollector:D(this,this.U),touchCollector:D(this,this.da)},window.addEventListener?(window.addEventListener("load",this.a.loadTimeCollector,u),window.addEventListener("mousemove",this.a.mouseCollector,
						u),window.addEventListener("keypress",this.a.keyboardCollector,u),window.addEventListener("devicemotion",this.a.accelerometerCollector,u),window.addEventListener("touchmove",this.a.touchCollector,u)):document.attachEvent?(document.attachEvent("onload",this.a.loadTimeCollector),document.attachEvent("onmousemove",this.a.mouseCollector),document.attachEvent("keypress",this.a.keyboardCollector)):q(new sjcl.exception.bug("can't attach event")),this.q=!0)},stopCollectors:function(){this.q&&(window.removeEventListener?
						(window.removeEventListener("load",this.a.loadTimeCollector,u),window.removeEventListener("mousemove",this.a.mouseCollector,u),window.removeEventListener("keypress",this.a.keyboardCollector,u),window.removeEventListener("devicemotion",this.a.accelerometerCollector,u),window.removeEventListener("touchmove",this.a.touchCollector,u)):document.detachEvent&&(document.detachEvent("onload",this.a.loadTimeCollector),document.detachEvent("onmousemove",this.a.mouseCollector),document.detachEvent("keypress",
						this.a.keyboardCollector)),this.q=u)},addEventListener:function(a,b){this.w[a][this.V++]=b},removeEventListener:function(a,b){var c,d,e=this.w[a],f=[];for(d in e)e.hasOwnProperty(d)&&e[d]===b&&f.push(d);for(c=0;c<f.length;c++)d=f[c],delete e[d]},$:function(){E(1)},ba:function(a){var b,c;try{b=a.x||a.clientX||a.offsetX||0,c=a.y||a.clientY||a.offsetY||0}catch(d){c=b=0}0!=b&&0!=c&&sjcl.random.addEntropy([b,c],2,"mouse");E(0)},da:function(a){a=a.touches[0]||a.changedTouches[0];sjcl.random.addEntropy([a.pageX||
						a.clientX,a.pageY||a.clientY],1,"touch");E(0)},aa:function(){E(2)},U:function(a){a=a.accelerationIncludingGravity.x||a.accelerationIncludingGravity.y||a.accelerationIncludingGravity.z;if(window.orientation){var b=window.orientation;"number"===typeof b&&sjcl.random.addEntropy(b,1,"accelerometer")}a&&sjcl.random.addEntropy(a,2,"accelerometer");E(0)}};function C(a,b){var c,d=sjcl.random.w[a],e=[];for(c in d)d.hasOwnProperty(c)&&e.push(d[c]);for(c=0;c<e.length;c++)e[c](b)}
						function E(a){"undefined"!==typeof window&&window.performance&&"function"===typeof window.performance.now?sjcl.random.addEntropy(window.performance.now(),a,"loadtime"):sjcl.random.addEntropy((new Date).valueOf(),a,"loadtime")}function A(a){a.b=B(a).concat(B(a));a.A=new sjcl.cipher.aes(a.b)}function B(a){for(var b=0;4>b&&!(a.f[b]=a.f[b]+1|0,a.f[b]);b++);return a.A.encrypt(a.f)}function D(a,b){return function(){b.apply(a,arguments)}}sjcl.random=new sjcl.prng(6);
						a:try{var F,G,H,I;if(I="undefined"!==typeof module){var J;if(J=module.exports){var K;try{K=require("crypto")}catch(L){K=null}J=(G=K)&&G.randomBytes}I=J}if(I)F=G.randomBytes(128),F=new Uint32Array((new Uint8Array(F)).buffer),sjcl.random.addEntropy(F,1024,"crypto['randomBytes']");else if("undefined"!==typeof window&&"undefined"!==typeof Uint32Array){H=new Uint32Array(32);if(window.crypto&&window.crypto.getRandomValues)window.crypto.getRandomValues(H);else if(window.msCrypto&&window.msCrypto.getRandomValues)window.msCrypto.getRandomValues(H);
						else break a;sjcl.random.addEntropy(H,1024,"crypto['getRandomValues']")}}catch(M){"undefined"!==typeof window&&window.console&&(console.log("There was an error collecting entropy from the browser:"),console.log(M))}
						sjcl.json={defaults:{v:1,iter:1E3,ks:128,ts:64,mode:"ccm",adata:"",cipher:"aes"},Y:function(a,b,c,d){c=c||{};d=d||{};var e=sjcl.json,f=e.e({iv:sjcl.random.randomWords(4,0)},e.defaults),g;e.e(f,c);c=f.adata;"string"===typeof f.salt&&(f.salt=sjcl.codec.base64.toBits(f.salt));"string"===typeof f.iv&&(f.iv=sjcl.codec.base64.toBits(f.iv));(!sjcl.mode[f.mode]||!sjcl.cipher[f.cipher]||"string"===typeof a&&100>=f.iter||64!==f.ts&&96!==f.ts&&128!==f.ts||128!==f.ks&&192!==f.ks&&0x100!==f.ks||2>f.iv.length||4<
						f.iv.length)&&q(new sjcl.exception.invalid("json encrypt: invalid parameters"));"string"===typeof a?(g=sjcl.misc.cachedPbkdf2(a,f),a=g.key.slice(0,f.ks/32),f.salt=g.salt):sjcl.ecc&&a instanceof sjcl.ecc.elGamal.publicKey&&(g=a.kem(),f.kemtag=g.tag,a=g.key.slice(0,f.ks/32));"string"===typeof b&&(b=sjcl.codec.utf8String.toBits(b));"string"===typeof c&&(f.adata=c=sjcl.codec.utf8String.toBits(c));g=new sjcl.cipher[f.cipher](a);e.e(d,f);d.key=a;f.ct=sjcl.mode[f.mode].encrypt(g,b,f.iv,c,f.ts);return f},
						encrypt:function(a,b,c,d){var e=sjcl.json,f=e.Y.apply(e,arguments);return e.encode(f)},X:function(a,b,c,d){c=c||{};d=d||{};var e=sjcl.json;b=e.e(e.e(e.e({},e.defaults),b),c,!0);var f,g;f=b.adata;"string"===typeof b.salt&&(b.salt=sjcl.codec.base64.toBits(b.salt));"string"===typeof b.iv&&(b.iv=sjcl.codec.base64.toBits(b.iv));(!sjcl.mode[b.mode]||!sjcl.cipher[b.cipher]||"string"===typeof a&&100>=b.iter||64!==b.ts&&96!==b.ts&&128!==b.ts||128!==b.ks&&192!==b.ks&&0x100!==b.ks||!b.iv||2>b.iv.length||4<b.iv.length)&&
						q(new sjcl.exception.invalid("json decrypt: invalid parameters"));"string"===typeof a?(g=sjcl.misc.cachedPbkdf2(a,b),a=g.key.slice(0,b.ks/32),b.salt=g.salt):sjcl.ecc&&a instanceof sjcl.ecc.elGamal.secretKey&&(a=a.unkem(sjcl.codec.base64.toBits(b.kemtag)).slice(0,b.ks/32));"string"===typeof f&&(f=sjcl.codec.utf8String.toBits(f));g=new sjcl.cipher[b.cipher](a);f=sjcl.mode[b.mode].decrypt(g,b.ct,b.iv,f,b.ts);e.e(d,b);d.key=a;return 1===c.raw?f:sjcl.codec.utf8String.fromBits(f)},decrypt:function(a,b,
						c,d){var e=sjcl.json;return e.X(a,e.decode(b),c,d)},encode:function(a){var b,c="{",d="";for(b in a)if(a.hasOwnProperty(b))switch(b.match(/^[a-z0-9]+$/i)||q(new sjcl.exception.invalid("json encode: invalid property name")),c+=d+'"'+b+'":',d=",",typeof a[b]){case "number":case "boolean":c+=a[b];break;case "string":c+='"'+escape(a[b])+'"';break;case "object":c+='"'+sjcl.codec.base64.fromBits(a[b],0)+'"';break;default:q(new sjcl.exception.bug("json encode: unsupported type"))}return c+"}"},decode:function(a){a=
						a.replace(/\s/g,"");a.match(/^\{.*\}$/)||q(new sjcl.exception.invalid("json decode: this isn't json!"));a=a.replace(/^\{|\}$/g,"").split(/,/);var b={},c,d;for(c=0;c<a.length;c++)(d=a[c].match(/^\s*(?:(["']?)([a-z][a-z0-9]*)\1)\s*:\s*(?:(-?\d+)|"([a-z0-9+\/%*_.@=\-]*)"|(true|false))$/i))||q(new sjcl.exception.invalid("json decode: this isn't json!")),d[3]?b[d[2]]=parseInt(d[3],10):d[4]?b[d[2]]=d[2].match(/^(ct|adata|salt|iv)$/)?sjcl.codec.base64.toBits(d[4]):unescape(d[4]):d[5]&&(b[d[2]]="true"===
						d[5]);return b},e:function(a,b,c){a===s&&(a={});if(b===s)return a;for(var d in b)b.hasOwnProperty(d)&&(c&&(a[d]!==s&&a[d]!==b[d])&&q(new sjcl.exception.invalid("required parameter overridden")),a[d]=b[d]);return a},fa:function(a,b){var c={},d;for(d in a)a.hasOwnProperty(d)&&a[d]!==b[d]&&(c[d]=a[d]);return c},ea:function(a,b){var c={},d;for(d=0;d<b.length;d++)a[b[d]]!==s&&(c[b[d]]=a[b[d]]);return c}};sjcl.encrypt=sjcl.json.encrypt;sjcl.decrypt=sjcl.json.decrypt;sjcl.misc.ca={};
						sjcl.misc.cachedPbkdf2=function(a,b){var c=sjcl.misc.ca,d;b=b||{};d=b.iter||1E3;c=c[a]=c[a]||{};d=c[d]=c[d]||{firstSalt:b.salt&&b.salt.length?b.salt.slice(0):sjcl.random.randomWords(2,0)};c=b.salt===s?d.firstSalt:b.salt;d[c]=d[c]||sjcl.misc.pbkdf2(a,c,b.iter);return{key:d[c].slice(0),salt:c.slice(0)}};
						
						module.exports = {
							e: sjcl.encrypt,
							d: sjcl.decrypt
						};
						
					}
				},
				"services": {
					"ads.js": function (exports, module, require) {
						var zebra = require("../zebra.js");

						zebra.factory("ads", [
							"$q", "config",
						function (
							$q, config
						) {
							"use strict";

							var ads;
							var categories;
							var initOk = false;
							var cacheTimeout = 0;
							var adsIndex = 0;

							function saveCategories () {
								localStorage.setItem(
									"consistency@categories",
									JSON.stringify(categories)
								);
							}

							function loadCategories () {
								categories = localStorage.getItem("consistency@categories");
								if (categories) {
									categories = JSON.parse(categories);
								}
								else {
									categories = {
										"Action": {show: 0, clicks: 0},
										"Adventure": {show: 0, clicks: 0},
										"Arcade": {show: 0, clicks: 0},
										"Arcade & Action": {show: 0, clicks: 0},
										"Board": {show: 0, clicks: 0},
										"Books & Reference": {show: 0, clicks: 0},
										"Brain & Puzzle": {show: 0, clicks: 0},
										"Business": {show: 0, clicks: 0},
										"Card": {show: 0, clicks: 0},
										"Cards & Casino": {show: 0, clicks: 0},
										"Casino": {show: 0, clicks: 0},
										"Casual": {show: 0, clicks: 0},
										"Comics": {show: 0, clicks: 0},
										"Communications": {show: 0, clicks: 0},
										"Education": {show: 0, clicks: 0},
										"Educational": {show: 0, clicks: 0},
										"Entertainment": {show: 0, clicks: 0},
										"Family": {show: 0, clicks: 0},
										"Finance": {show: 0, clicks: 0},
										"Health & Fitness": {show: 0, clicks: 0},
										"Libraries & Demo": {show: 0, clicks: 0},
										"Lifestyle": {show: 0, clicks: 0},
										"Live Wallpaper": {show: 0, clicks: 0},
										"Media & Video": {show: 0, clicks: 0},
										"Medical": {show: 0, clicks: 0},
										"Music": {show: 0, clicks: 0},
										"Music & Audio": {show: 0, clicks: 0},
										"News & Magazines": {show: 0, clicks: 0},
										"Personalization": {show: 0, clicks: 0},
										"Photography": {show: 0, clicks: 0},
										"Productivity": {show: 0, clicks: 0},
										"Puzzle": {show: 0, clicks: 0},
										"Racing": {show: 0, clicks: 0},
										"Role Playing": {show: 0, clicks: 0},
										"Shopping": {show: 0, clicks: 0},
										"Simulation": {show: 0, clicks: 0},
										"Social": {show: 0, clicks: 0},
										"Sports": {show: 0, clicks: 0},
										"Sports Games": {show: 0, clicks: 0},
										"Strategy": {show: 0, clicks: 0},
										"Tools": {show: 0, clicks: 0},
										"Travel & Local": {show: 0, clicks: 0},
										"Trivia": {show: 0, clicks: 0},
										"Weather": {show: 0, clicks: 0},
										"Word": {show: 0, clicks: 0}
									};

									saveCategories();
								}
							}

							loadCategories();

							function init () {
								return $q(function (resolve, reject) {
									if (window.appnext) {
										if (!initOk) {
											window.appnext.init(
												config.appnext.id,

												function () {
													initOk = true;
													resolve();
												},
												reject
											);
										}
										else {
											resolve();
										}
									}
									else {
										reject("NOT READY INIT");
									}
								});
							}

							function updateCategoriesShow (ad) {
								var cats = ad.categories.split(",");

								cats.forEach(function (a) {
									var cat = categories[a.trim()] || {show: 0, clicks: 0};
									cat.show++;
									categories[a.trim()] = cat;
								});

								saveCategories();
							}

							function updateCategoriesClick (ad) {
								var cats = ad.categories.split(",");

								cats.forEach(function (a) {
									var cat = categories[a.trim()] || {show: 0, clicks: 0};
									cat.clicks++;
									categories[a.trim()] = cat;
								});

								saveCategories();
							}

							function getCategories () {
								var cats = [];
								var catStr = "";
								var catClicks = [];
								var catShow = [];
								var i;

								for (var name in categories) {
									if (categories.hasOwnProperty(name)) {
										var cat = categories[name];
										cat.name = name;
										cats.push(cat);

										if (cat.clicks > 0) {
											catClicks.push(cat);
										}
										else if (cat.show > 0) {
											catShow.push(cat);
										}
									}
								}

								if (catClicks.length > 0) {
									catClicks.sort(function (a, b) {
										var ar = a.show / a.clicks;
										var br = b.show / b.clicks;

										return ar < br;
									});

									// choose 3 top clicked categories,
									for (i=0; i<3 && i < catClicks.length; i++) {

										if (catStr !== "") {
											catStr += ",";
										}

										catStr += catClicks[i].name;
									}
								}

								if (catShow.length > 0) {
									// choose 2 less show cats
									catShow.sort(function (a, b) {
										return b.show < a.show;
									});

									for (i=0; i<2 && i < catShow.length; i++) {

										if (catStr !== "") {
											catStr += ",";
										}

										catStr += catShow[i].name;
									}
								}

								// Choose one random category from all cats.
								if (catStr !== "") {
									catStr += ",";
								}

								catStr += cats[Math.floor(Math.random()*100%cats.length)].name;

								return catStr;
							}

							function getAds () {
								return $q(function (resolve, reject) {
									if (ads && cacheTimeout < new Date().getTime()) {
										resolve(ads);
									}
									else {
										init().then(
											function () {
												window.appnext.loadAds(
													getCategories(),
													function (res) {
														adsIndex = 0;
														cacheTimeout = new Date().getTime() +
															1000 * 60 * 5;

														res.sort(function (a, b) {
															return b.revenueRate - a.revenueRate;
														});

														ads = res;
														resolve(ads);
													},
													function (err) {
														setTimeout(getAds, 3000); // retry in 3 seconds
														reject(err);
													}
												);
											},
											function (err) {
												setTimeout(getAds, 3000); // retry in 3 seconds
												reject(err);
											}
										);
									}
								});
							}

							function openAd (ad) {
								window.appnext.openAd(ad.id, function () {
									updateCategoriesClick(ad);
								}, function (err) {
									console.log(err);
								});
							}

							function getAd () {
								return getAds().then(function (ads) {

									if (ads.length) {
										adsIndex = adsIndex % ads.length;
										var badchoiceAd = ads[adsIndex];

										adsIndex = (adsIndex + 1) % ads.length;
										var restartAd = ads[adsIndex];

										adsIndex = (adsIndex + 1) % ads.length;
										var winAd = ads[adsIndex];

										adsIndex = (adsIndex + 1) % ads.length;

										updateCategoriesShow(winAd);
										updateCategoriesShow(restartAd);
										updateCategoriesShow(badchoiceAd);

										return {
											winAd: winAd,
											restartAd: restartAd,
											badchoiceAd: badchoiceAd
										};
									}

									return $q.reject("no ads");
								});
							}

							return {
								getAd: getAd,
								openAd: openAd
							};
						}]);

					},
					"audio.js": function (exports, module, require) {
						var zebra = require("../zebra.js");

						zebra.factory("audio", [
							"$q", "$ionicPlatform", "$interval", function (
							$q,
							$ionicPlatform,
							$interval
						) {
							"use strict";

							var audio;
							function driver () {
								return $q(function (resolve) {
									if (audio === undefined) {
										$ionicPlatform.ready(function () {
											if (window.cordova) {
												audio = {audio: Media, path: "/android_asset/www/res/"};
												resolve(audio);
											}
											else {
												audio = {audio: Audio, path: "res/"};
												resolve(audio);
											}
										});
									}
									else {
										resolve(audio);
									}
								});
							}

							function Sound (sound) {
								var stop;

								this.play = function () {
									sound.play();

									if (window.cordova && sound.loop) {
										stop = $interval(function () {
											sound.getCurrentPosition(
												// success callback
												function (position) {
													if (position < 0) {
														sound.stop();
														sound.play();
													}
												},
												// error callback
												function () {}
											);
										}, 1000);
									}
								};

								this.pause = function () {
									if (stop) {
										$interval.cancel(stop);
										stop = undefined;
									}

									sound.pause();
								};

								this.loop = function (loop) {
									sound.loop = loop;
								};
							}

							var cache = {};
							function open (path) {
								return driver().then(function (audio) {
									var sound = cache[path];
									if (!sound) {
										sound = new Sound(new audio.audio(audio.path + path));
										cache[path] = sound;
									}

									return sound;
								});
							}

							var alias = {};
							function load (name, path) {
								return open(path).then(function (sound) {
									alias[name] = sound;
									return sound;
								});
							}

							function play (name) {
								if (alias[name]) {
									alias[name].play();
								}
							}

							return {
								open: open,
								load: load,
								play: play
							};
						}]);
					},
					"db.js": function (exports, module, require) {
						var zebra = require("../zebra.js");

						zebra.factory("db", ["$http", "$q", "$ionicPlatform", function (
							$http,
							$q,
							$ionicPlatform
						) {
							"use strict";

							var db;

							function getDB () {
								return $q(function (resolve) {
									if (db) {
										resolve(db);
									}
									else {
										$ionicPlatform.ready(function () {
											db = window.openDatabase(
												"consistency",
												"1.0",
												"Consistency Game Data",
												1000000
											);

											resolve(db);
										});
									}
								});
							}

							function run (stmts) {
								return getDB().then(function (db) {
									return $q(function (resolve, reject) {
										db.transaction(function (tx) {
											var index = 0;
											function runS () {
												if (index < stmts.length) {
													var s = stmts[index];
													index++;
													tx.executeSql(s, [], runS);
												}
												else {
													resolve(db);
												}
											}

											runS();

										}, function (e) {
											reject(e);
										});
									});
								});
							}

							function exec (stmt) {
								return getDB().then(function (db) {
									return $q(function (resolve, reject) {
										db.transaction(function (tx) {
											tx.executeSql(stmt, [], function (tx, res) {
												var result = [];
												for (var i=0; i<res.rows.length; i++) {
													result.push(res.rows.item(i));
												}

												resolve(result);
											});
										}, function (e) {
											reject(e);
										});
									});
								});
							}

							return {
								run: run,
								exec: exec
							};

						}]);
					},
					"packs.js": function (exports, module, require) {
						var zebra = require("../zebra.js");
						var ed = require("../libs/ed.js");
						// var bz2 = require("../libs/bzip2.js");

						var serverPass = "^NUz8v_yK^^KME=";

						function generatePassword () {
							"use strict";

							var password = "";
							var availableSymbols = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqr" +
														"stuvwxyz0987654321*{}[]()/&%$#^~*+";
							for (var i = 0; i < 128; i++) {
								var symbol = availableSymbols[
									Math.floor(Math.random()*availableSymbols.length)
								];

								password += symbol;
							}

							return password;
						}

						var rules = [
							"immediately to the left of",
							"middle",
							"same position as",
						    "next to"
						    // leave item out,
						];

						var vars = [];
						for (var x=0; x<6; x++) {
							for (var y=0; y<6; y++) {
								vars.push("var_"+y+"_"+x);
							}
						}

						// destructive function,
						function getSolution (solution) {
							"use strict";
							solution.forEach(function (row) {
								row.forEach(function (item, x) {
									row[x] = vars[item];
								});
							});

							return solution;
						}

						function getClues (clues) {
							"use strict";
							var c = [];

							rules.forEach(function (type, index) {
								if (clues[index]) {
									clues[index].forEach(function (clue) {
										var s = {
											type: type,
											a: {v: vars[clue[0][0]], y: clue[0][1]}
										};

										if (clue.length === 2) {
											s.b = {v: vars[clue[1][0]], y: clue[1][1]};
										}

										c.push(s);
									});
								}
							});

							return c;
						}

						zebra.factory("packs", [
							"$http", "$q", "$ionicPlatform", "db",
						function (
							$http,
							$q,
							$ionicPlatform,
							db
						) {
							"use strict";
							// localStorage.removeItem("s");
							var s = localStorage.getItem("s");
							var data = {total: 0};

							function open (url) {
								return $http({
									url: url,
									method: "GET",
									transformResponse: [function (data) {
										return data;
									}]
								}).then(function (data) {
									return JSON.parse(
										ed.d(
											serverPass,
											data.data
										)
									);
								}, function (err) {
									return err;
								});
							}

							function addPack (pack) {
								var status = "unlocked";
								var unlock = "null";
								var sql = [];

								sql.push("INSERT OR REPLACE INTO packs (id,name,status,completed," +
										"total, unlock) VALUES (" +
										pack.id + "," +
										"'" + pack.name + "'," +
										"'" + status + "'," +
										"0," +
										pack.total + "," +
										unlock +
									");");

								pack.grids.forEach(function (grid, index) {
									sql.push("INSERT OR REPLACE INTO grids(packId, w, h, completed," +
											" total, pos) " +
											"VALUES (" +
												pack.id + "," +
												grid.w + "," +
												grid.h + "," +
												"0," +
												grid.total + "," +
												index +
											");"
									);

									// setup puzzles,
									var gIndex = index;
									grid.puzzles.forEach(function (puzzle, index) {
										var status = "unlocked";
										var unlock = 0;

										sql.push("INSERT OR REPLACE INTO puzzles(" +
												"packId,gridPos,status," +
												"completed,data, pos) VALUES (" +
													pack.id + "," +
													gIndex + "," +
													"'" + status + "'," +
													"0," +
													"'" + ed.e(
														s,
														JSON.stringify({
															data: puzzle,
															unlock: unlock,
															info: {
																id: pack.id,
																gid: gIndex,
																pos: index
															}
														})
													) + "'," +
													index +
												");"
										);
									});
								});

								return db.run(sql);
							}

							function countPacks () {
								db.exec("SELECT count(id) as cnt FROM packs;").then(
									function (col) {
										if (col.length === 1) {
											data.total = col[0].cnt;
										}
										else {
											data.total = 0;
										}
									}
								);
							}

							function getFile (path) {
								var url = "res/packs/" + path;

								if (window.cordova) {
									url = "/android_asset/www/" + url;
								}

								return open(url).then(
									addPack
								);
							}

							if (!s) {
								s = generatePassword();
								localStorage.setItem("s", s);
							}

							db.run(
								[
									/*"DROP TABLE packs;",
									"DROP TABLE grids;",
									"DROP TABLE puzzles;",*/
									"CREATE TABLE IF NOT EXISTS packs (" +
											"id integer primary key," +
											"name text," +
											"status text," +
											"completed integer," +
											"total integer, " +
											"unlock text" +
										");",
									"CREATE TABLE IF NOT EXISTS grids (" +
											"packId integer," +
											"pos integer," +
											"w integer," +
											"h integer," +
											"completed integer," +
											"total integer," +
											"FOREIGN KEY (packId) REFERENCES packs(id), " +
											"PRIMARY KEY (packId, pos)" +
										");",
									"CREATE TABLE IF NOT EXISTS puzzles (" +
											"packId integer," +
											"gridPos integer," +
											"pos integer," +
											"status text," +
											"completed integer," + // Save as %
											"progress text," +
											"time integer," +
											"data text," +
											"FOREIGN KEY(packId) REFERENCES packs(id)," +
											"FOREIGN KEY(gridPos) REFERENCES grids(pos), " +
											"PRIMARY KEY (packId, gridPos, pos)" +
										");"
								]
							)
							.then(function () { return getFile("pack_0.json"); })
							.then(function () { return getFile("pack_1.json"); })
							.then(function () { return getFile("pack_2.json"); })
							.then(function () { return getFile("pack_3.json"); })
							.then(function () { return getFile("pack_4.json"); })
							.then(function () { return getFile("pack_5.json"); })
							.then(function () { return getFile("pack_6.json"); })
							.then(countPacks);

							/* Public Packs Service functions, */

							// Get packs with paging support,
							function getPacks (a, b) {
								return db.exec("SELECT * FROM packs " +
										"WHERE id >= " + a + " AND id <= " + b + " order by id asc;"
								);
							}

							function getPack (packIndex) {
								return db.exec("SELECT * FROM packs WHERE " +
									" id = " + packIndex + ";"
								).then(
									function (cols) {
										var pack = cols[0];
										return db.exec("SELECT * FROM grids WHERE packId = " +
											pack.id + " order by pos asc;"
										).then(
											function (grids) {
												pack.grids = grids;
												return pack;
											}
										);
									}
								);
							}

							// TODO: change packIndex -> packId, gridIndex -> gridId, on all.
							function getDBPuzzles (packIndex, gridIndex) {
								return db.exec("SELECT * FROM packs WHERE " +
									" id = " + packIndex + ";"
								).then(
									function (cols) {
										var pack = cols[0];
										return db.exec("SELECT * FROM grids WHERE packId=" +
											packIndex + " AND pos=" + gridIndex + ";"
										).then(
											function (cols) {
												var grid = cols[0];
												pack.grid = grid;

												return db.exec(
													"SELECT packId, gridPos, pos,"+
													" status, completed, time " +
													" FROM puzzles WHERE packId=" + packIndex +
													" AND gridPos = " + gridIndex +
													" order by pos asc;"
												).then(
													function (puzzles) {
														grid.puzzles = puzzles;
														return pack;
													}
												);
											}
										);
									}
								);
							}

							function getPuzzles (packIndex, gridIndex) {
								if (gridIndex < 0) {
									var url = "res/tutorial/pack_start.json";

									if (window.cordova) {
										url = "/android_asset/www/" + url;
									}

									return $http.get(url).then(function (data) {
										return data.data;
									});
								}
								else {
									return getDBPuzzles(packIndex, gridIndex);
								}
							}

							function getDBPuzzle (packIndex, gridIndex, puzzleIndex) {
								return db.exec("SELECT * FROM packs WHERE " +
									" id = " + packIndex + ";"
								).then(
									function (cols) {
										var pack = cols[0];
										return db.exec("SELECT * FROM grids WHERE packId=" +
											packIndex + " AND pos=" + gridIndex + ";"
										).then(
											function (cols) {
												var grid = cols[0];
												pack.grid = grid;

												return db.exec(
													"SELECT * FROM puzzles WHERE " +
													" packId=" + packIndex +
													" AND gridPos = " + gridIndex +
													" AND pos = "+ puzzleIndex
												).then(
													function (puzzleInfo) {
														var puzzle = JSON.parse(
															ed.d(s, puzzleInfo[0].data)
														);

														if (
															puzzle.info.id !== +packIndex ||
															puzzle.info.gid !== +gridIndex ||
															puzzle.info.pos !== +puzzleIndex
														) {
															return $q.reject("BAD_PUZZLE");
														}
														else {
															var p = {
																grid: {
																	w: puzzle.data[0][0],
																	h: puzzle.data[0][1]
																}
															};

															p.completed = puzzleInfo[0].completed;
															p.solution = getSolution(puzzle.data[1]);
															p.clues = getClues(puzzle.data[2]);

															if (puzzleInfo[0].progress) {
																p.progress = JSON.parse(
																	puzzleInfo[0].progress
																);
															}

															grid.puzzle = p;

															return pack;
														}
													}
												);
											}
										);
									}
								);
							}

							function getPuzzle (packIndex, gridIndex, puzzleIndex) {
								if (gridIndex < 0) {
									return getPuzzles(packIndex, gridIndex).then(
										function (pack) {
											pack.grid.puzzle = pack.grid.puzzles[puzzleIndex];
											pack.grid.puzzle.grid = pack.grid;
											return pack;
										}
									);
								}
								else {
									return getDBPuzzle(packIndex, gridIndex, puzzleIndex);
								}
							}

							function savePuzzleProgress (
								packIndex,
								gridIndex,
								puzzleIndex,
								completed,
								progress
							) {
								var stmts = [];

								stmts.push("UPDATE puzzles " +
									"SET completed="+completed +
									", progress = " + (
										completed===100?
										"null":
										"'" + JSON.stringify(progress) + "'"
									) +
									" WHERE "+
									" packId=" + packIndex +
									" AND gridPos = " + gridIndex +
									" AND pos = "+ puzzleIndex
								);

								if (completed === 100) {
									stmts.push(
										"UPDATE packs SET " +
										"completed = (SELECT count(*) FROM puzzles WHERE packId=" +
										packIndex + " AND completed=100)" +
										" WHERE id="+packIndex+";"
									);

									stmts.push(
										"UPDATE grids SET " +
										"completed = (SELECT count(*) FROM puzzles WHERE packId=" +
										packIndex + " AND gridPos="+gridIndex+" AND completed=100)" +
										" WHERE packId="+packIndex+" AND pos="+gridIndex+";"
									);
								}

								return db.run(stmts);
							}

							return {
								data: data,
								getPacks: getPacks,
								getPack: getPack,
								getPuzzles: getPuzzles,
								getPuzzle: getPuzzle,
								savePuzzleProgress: savePuzzleProgress
							};

						}]);
					}
				},
				"zebra.js": function (exports, module, require) {
					var zebra = angular.module("zebra", ["ionic"]);

					zebra.run([
						"$ionicPlatform", "$rootScope", function (
						$ionicPlatform
					) {
						"use strict";

						$ionicPlatform.ready(function () {
							if (window.cordova && window.cordova.Keyboard) {
								cordova.Keyboard.hideKeyboardAccessoryBar(true);
							}

							if (window.StatusBar) {
								StatusBar.styleDefault();
							}
						});
					}]);

					zebra.config([
						"$ionicConfigProvider",
						"$httpProvider",
						"$stateProvider",
						"$urlRouterProvider",
					function (
						$ionicConfigProvider,
						$httpProvider,
						$stateProvider,
						$urlRouterProvider
					) {
						"use strict";

						$ionicConfigProvider.views.maxCache(0);

						$stateProvider
							.state("start", {
								url: "/start",
								templateUrl: "templates/start.html"
							})
							.state("about", {
								url: "/about",
								templateUrl: "templates/about.html"
							})
							.state("packs", {
								url: "/packs",
								"abstract": true,
								template: "<ion-nav-view />"
							})
							.state("packs.index", {
								url: "",
								views: {
									"": {
										templateUrl: "templates/packs.html",
										controller: "PacksCtrl"
									}
								}
							})
							.state("packs.pack", {
								url: "/:packIndex",
								views: {
									"@": {
										templateUrl: "templates/pack.html",
										controller: "PackCtrl"
									}
								}
							})
							.state("packs.pack.puzzles", {
								url: "/:gridIndex",
								views: {
									"@": {
										templateUrl: "templates/puzzles.html",
										controller: "PuzzlesCtrl"
									}
								}
							})
							.state("packs.pack.puzzles.puzzle", {
								url: "/:puzzleIndex",
								views: {
									"@": {
										templateUrl: "templates/puzzle.html",
										controller: "PuzzleCtrl"
									}
								}
							});

						// if none of the above states are matched, use this as the fallback
						$urlRouterProvider.otherwise("/start");
					}]);

					module.exports = zebra;
				}
			}
		}
	}
})("consistency/www-dev/js/app.dev");
